generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @default(autoincrement())
  firstName        String               @map("first_name") @db.VarChar(100)
  lastName         String               @map("last_name") @db.VarChar(100)
  email            String               @unique @db.VarChar(255)
  phone            String               @db.VarChar(20)
  idNumber         String?              @map("id_number") @db.VarChar(20)
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @updatedAt @map("updated_at")
  password         String               @db.VarChar(255)
  passwordResets   PasswordResetToken[]
  paymentReminders PaymentReminder[]
  requests         Request[]

  @@map("users")
}

model Employee {
  id               Int            @id @default(autoincrement())
  firstName        String         @map("first_name") @db.VarChar(100)
  lastName         String         @map("last_name") @db.VarChar(100)
  email            String?        @db.VarChar(255)
  phone            String?        @db.VarChar(20)
  idNumber         String?        @unique @map("id_number") @db.VarChar(20)
  position         String?        @db.VarChar(100)
  department       String?        @db.VarChar(100)
  role             EmployeeRole   @default(STAFF)
  isActive         Boolean        @default(true) @map("is_active")
  hireDate         DateTime       @default(now()) @map("hire_date")
  salary           Decimal?       @db.Decimal(10, 2)
  username         String?        @unique @db.VarChar(100)
  password         String?        @db.VarChar(255)
  canAccessAdmin   Boolean        @default(false) @map("can_access_admin")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  followUps        FollowUp[]
  modifications    Modification[]
  assignedRequests Request[]

  @@map("employees")
}

model Request {
  id                Int               @id @default(autoincrement())
  userId            Int?              @map("user_id")
  assignedToId      Int?              @map("assigned_to_id")
  purpose           String            @db.VarChar(255)
  recipient         String            @db.VarChar(255)
  description       String
  applicantName     String            @map("applicant_name") @db.VarChar(200)
  phone             String            @db.VarChar(20)
  idNumber          String?           @map("id_number") @db.VarChar(20)
  attachments       String?
  voiceRecordingUrl String?           @map("voice_recording_url")
  status            RequestStatus     @default(PENDING)
  price             Decimal           @db.Decimal(10, 2)
  deliveryDate      DateTime?         @map("delivery_date")
  priority          Priority          @default(MEDIUM)
  notes             String?
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  couponCode        String?           @map("coupon_code") @db.VarChar(50)
  discountAmount    Decimal?          @map("discount_amount") @db.Decimal(10, 2)
  finalPrice        Decimal?          @map("final_price") @db.Decimal(10, 2)
  originalPrice     Decimal?          @map("original_price") @db.Decimal(10, 2)
  followUps         FollowUp[]
  modifications     Modification[]
  paymentReminders  PaymentReminder[]
  payments          Payment[]
  assignedTo        Employee?         @relation(fields: [assignedToId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])

  @@map("requests")
}

model Payment {
  id            Int           @id @default(autoincrement())
  requestId     Int           @map("request_id")
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod @map("payment_method")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  transactionId String?       @map("transaction_id") @db.VarChar(255)
  bankReference String?       @map("bank_reference") @db.VarChar(255)
  paymentDate   DateTime?     @map("payment_date")
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  request       Request       @relation(fields: [requestId], references: [id])

  @@map("payments")
}

model Modification {
  id               Int                @id @default(autoincrement())
  requestId        Int                @map("request_id")
  employeeId       Int?               @map("employee_id")
  modificationType String             @map("modification_type") @db.VarChar(100)
  description      String
  status           ModificationStatus @default(PENDING)
  isFree           Boolean            @default(true) @map("is_free")
  modificationCost Decimal            @default(0) @map("modification_cost") @db.Decimal(10, 2)
  requestedAt      DateTime           @default(now()) @map("requested_at")
  completedAt      DateTime?          @map("completed_at")
  employee         Employee?          @relation(fields: [employeeId], references: [id])
  request          Request            @relation(fields: [requestId], references: [id])

  @@map("modifications")
}

model FollowUp {
  id            Int            @id @default(autoincrement())
  requestId     Int            @map("request_id")
  employeeId    Int?           @map("employee_id")
  agentName     String?        @map("agent_name") @db.VarChar(100)
  visitCount    Int            @default(0) @map("visit_count")
  maxVisits     Int            @default(10) @map("max_visits")
  notes         String?
  nextVisitDate DateTime?      @map("next_visit_date")
  status        FollowUpStatus @default(ACTIVE) @map("status")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  employee      Employee?      @relation(fields: [employeeId], references: [id])
  request       Request        @relation(fields: [requestId], references: [id])

  @@map("follow_ups")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model PaymentReminder {
  id           Int            @id @default(autoincrement())
  requestId    Int?           @map("request_id")
  userId       Int            @map("user_id")
  email        String         @db.VarChar(255)
  phone        String         @db.VarChar(20)
  userName     String         @map("user_name") @db.VarChar(200)
  reminderType ReminderType   @default(FIRST_REMINDER) @map("reminder_type")
  sentAt       DateTime       @default(now()) @map("sent_at")
  isRead       Boolean        @default(false) @map("is_read")
  status       ReminderStatus @default(SENT) @map("status")
  notes        String?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  request      Request?       @relation(fields: [requestId], references: [id])
  user         User           @relation(fields: [userId], references: [id])

  @@map("payment_reminders")
}

model Coupon {
  id            Int          @id @default(autoincrement())
  code          String       @unique @db.VarChar(50)
  discountType  DiscountType
  discountValue Decimal      @db.Decimal(10, 2)
  isActive      Boolean      @default(true) @map("is_active")
  validFrom     DateTime     @map("valid_from")
  validUntil    DateTime     @map("valid_until")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  @@map("coupons")
}

model Referral {
  id             Int      @id @default(autoincrement())
  discountCode   String   @unique @db.VarChar(50)
  referredEmails String[] @map("referred_emails")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("referrals")
}

model ReminderSettings {
  id                  Int      @id @default(autoincrement())
  firstReminderHours  Int      @default(24) @map("first_reminder_hours")
  secondReminderHours Int      @default(72) @map("second_reminder_hours")
  finalReminderHours  Int      @default(168) @map("final_reminder_hours")
  isActive            Boolean  @default(true) @map("is_active")
  maxRemindersPerDay  Int      @default(50) @map("max_reminders_per_day")
  reminderSubject     String   @default("تذكير بدفع الطلب") @map("reminder_subject") @db.VarChar(200)
  reminderTemplate    String?  @map("reminder_template")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("reminder_settings")
}

model ManualReminder {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(255)
  name      String    @db.VarChar(200)
  requestId String?   @map("request_id") @db.VarChar(50)
  purpose   String?   @db.VarChar(200)
  price     String?   @db.VarChar(50)
  subject   String    @db.VarChar(200)
  message   String
  status    String    @default("PENDING") @db.VarChar(20)
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("manual_reminders")
}

model Feedback {
  id         Int            @id @default(autoincrement())
  name       String         @db.VarChar(200)
  email      String         @db.VarChar(255)
  phone      String?        @db.VarChar(20)
  message    String
  status     FeedbackStatus @default(PENDING)
  adminNotes String?        @map("admin_notes")
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  @@map("feedback")
}

enum RequestStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
  DELIVERED   @map("delivered")
  CANCELLED   @map("cancelled")
}

enum PaymentMethod {
  BANK_TRANSFER @map("bank_transfer")
  ELECTRONIC    @map("electronic")
}

enum PaymentStatus {
  PENDING   @map("pending")
  COMPLETED @map("completed")
  FAILED    @map("failed")
  REFUNDED  @map("refunded")
}

enum ModificationStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
}

enum FollowUpStatus {
  ACTIVE    @map("active")
  COMPLETED @map("completed")
  SUSPENDED @map("suspended")
}

enum EmployeeRole {
  ADMIN   @map("admin")
  MANAGER @map("manager")
  STAFF   @map("staff")
  AGENT   @map("agent")
}

enum Priority {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
  URGENT @map("urgent")
}

enum ReminderType {
  FIRST_REMINDER  @map("first_reminder")
  SECOND_REMINDER @map("second_reminder")
  FINAL_REMINDER  @map("final_reminder")
}

enum ReminderStatus {
  SENT      @map("sent")
  DELIVERED @map("delivered")
  FAILED    @map("failed")
  CANCELLED @map("cancelled")
}

enum DiscountType {
  PERCENTAGE   @map("percentage")
  FIXED_AMOUNT @map("fixed_amount")
}

enum FeedbackStatus {
  PENDING   @map("pending")
  REVIEWED  @map("reviewed")
  RESPONDED @map("responded")
  CLOSED    @map("closed")
}
